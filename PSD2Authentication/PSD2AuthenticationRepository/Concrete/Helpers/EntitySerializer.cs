using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using CSharpFunctionalExtensions;
using PSD2AuthenticationDomain.Interfaces.Entity;
using PSD2AuthenticationDomain.Attributes;


namespace PSD2AuthenticationRepository.Concrete.Helpers
{
    public static class EntitySerializer
    {

        private const string _tableNameLabel = "{table_name}";
        private const string _properiesLabel = "{properties}";
        private const string _outputLabel = "{pk}";
        private const string _valuesLabel = "{values}";
        private const string _extraLabel = "{extra}";
        private const string _insertedLabel = "INSERTED";
        private const char _separator = ',';
        private const string _insertCommand = "INSERT INTO {table_name}({properties}) OUTPUT {extra} values ({values})";
        public static Result<string> ToInsertCommand(this IEntity entity)
        {
            return Result.Success(_insertCommand)
                .Bind(command => SetTableName(entity, command))
                .Bind(command => SetProperties(entity, command))
                .Bind(command => SetOutput(entity, command));
        }

        private static Result<string> SetTableName(IEntity entity, string command)
        {
            var entityType = entity.GetType();
            return Result.Success(command.Replace(_tableNameLabel, entityType.Name));
        }

        private static Result<string> SetProperties(IEntity entity, string command)
        {
            var entityType = entity.GetType();
            var properties = entityType.GetProperties();
            var valueItems = properties
                .ToList()
                .Where(property => !property.Name.Equals(entity.GetPrimaryKeyName()) && !property.PropertyType.Name.Contains("List") && !IsException(property))
                .Select(property => GetValue(property, entity))
                .ToList();

            var propertyItems = properties
                .ToList()
                .Where(property => !property.Name.Equals(entity.GetPrimaryKeyName()) && !property.PropertyType.Name.Contains("List") && !IsException(property))
                .Select(obj => obj.Name)
                .ToList();

            return Result.Success(command
                .Replace(_properiesLabel, string.Join(',', propertyItems))
                .Replace(_valuesLabel, string.Join(',', valueItems)));
        }

        private static Result<string> SetOutput(IEntity entity, string command)
        {
            return Result.Success(command
                .Replace(_outputLabel, entity.GetPrimaryKeyName())
                .Replace(_extraLabel, GetExtraField(entity)));
                
        }

        private static string GetValue(PropertyInfo propertyInfo, IEntity entity)
        {
            if (propertyInfo.PropertyType.Name.Equals(typeof(string).Name)) return GetStringValue(propertyInfo, entity);

            return null;
        }

        private static string GetStringValue(PropertyInfo propertyInfo, IEntity entity)
        {
            return $"'{propertyInfo.GetValue(entity).ToString()}'";
        }

        private static bool IsException(PropertyInfo property)
        {
            return property.GetCustomAttribute<ExcludeFromInsertAttribute>() != null;
        }
        private static bool IsAutoGenarated(PropertyInfo property)
        {
            return property.GetCustomAttribute<AutoGeneratedAttribute>() != null;
        }
        private static string GetExtraField(IEntity entity)
        {
            return Result.Success(entity.GetType()
                    .GetProperties()
                    .Where(property => IsAutoGenarated(property)).ToList())
                .Ensure(extraFields => extraFields != null, "No extra fields informed!")
                .Map(extraFields => string.Join(_separator, extraFields
                    .Select(property => $"{_insertedLabel}.{property.Name}")
                    .ToList()))
                .Finally(extraFields => extraFields.IsFailure ? string.Empty : extraFields.Value);
        }
    }
}
