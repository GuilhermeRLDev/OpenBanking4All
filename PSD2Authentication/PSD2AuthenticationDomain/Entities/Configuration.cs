using CSharpFunctionalExtensions;
using PSD2Authentication;
using PSD2AuthenticationDomain.Constants;
using PSD2AuthenticationDomain.Interfaces.Entity;
using PSD2AuthenticationDomain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PSD2AuthenticationDomain.Attributes;

namespace PSD2AuthenticationDomain.Entities
{
    public class Configuration : IParent
    {
        [AutoGenerated]
        public Guid ConfigurationId { get; set; }
        public string BankId { get; set; }
        public string BankName { get; set; }
        public string BankHostName { get; set; }
        public string BankAuthResource { get; set; }
        public string ClientSecret { get; set; }
        [ExcludeFromInsert]
        [AutoGenerated]
        public DateTime Creation { get; set; }
        public List<ApplicationConfiguration> ApplicationConfigurations { get; set; }
        public List<CertificateConfiguration> Certificates { get; set; }
        public string GetPrimaryKeyName()
        {
            return nameof(ConfigurationId);
        }
        public Guid GetPrimaryKeyValue()
        {
            return ConfigurationId;
        }
        public void AddItem(IEntity entity)
        {
            #region Make sure null objects are ignored
            if (entity == null) return;
            #endregion

            Result.Success(entity)
                .TapIf(entity.GetType().Name.Equals(nameof(ApplicationConfiguration)), entity => AddApplicationConfiguation(entity))
                .TapIf(entity.GetType().Name.Equals(nameof(CertificateConfiguration)), entity => AddCertificateConfiguation(entity));
        }
        private void AddApplicationConfiguation(IEntity entity)
        {
            Result.Success(entity)
                .TapIf(ApplicationConfigurations == null, entity => ApplicationConfigurations = new List<ApplicationConfiguration>())
                .TapIf(!ApplicationConfigurations.Any(item => item.ApplicationId == entity.GetPrimaryKeyValue()), entity => ApplicationConfigurations.Add((ApplicationConfiguration)entity));
        }
        private void AddCertificateConfiguation(IEntity entity)
        {
            Result.Success(entity)
                .TapIf(Certificates == null, entity => Certificates = new List<CertificateConfiguration>())
                .TapIf(!Certificates.Any(item => item.CertificateconfigurationId == entity.GetPrimaryKeyValue()), entity => Certificates.Add((CertificateConfiguration)entity));
        }

        public Result<IEntity, ErrorModel> Validate()
        {
            return  Result.Success(this)
                .Ensure(resource => !string.IsNullOrEmpty(resource.BankAuthResource), DefaultMessages.NullValueMessage.Replace(DefaultMessages.Label, nameof(BankAuthResource)))
                .Ensure(resource => !string.IsNullOrEmpty(resource.BankId), DefaultMessages.NullValueMessage.Replace(DefaultMessages.Label, nameof(BankAuthResource)))
                .Finally(result => result.IsSuccess ? Result.Success<IEntity, ErrorModel>(this) : Result.Failure<IEntity, ErrorModel>(new ErrorModel(ErrorCode.ValidationError , result.Error)));
        }
    }
}
